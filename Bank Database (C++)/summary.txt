    After running my test with my test plans, I can say that my program does satisfy the requirements. The only minor bug I would say is that when you modify a non existing account number, it still asks for a new address. 
    Additional features that I added was a function called: isEmpty(). I created this function because the start pointer is private, so only the llist.cpp class can access it. So everytime I ran a function, it will still ask for an account number, despite the list being empty. To fix this bug, I implemented the isEmpty() function in the llist.cpp class. It basically checks if start is NULL, and if it is, it returns 0, if it is not NULL, it returns -1. So now in the user_interface.cpp file, it can check if the function returns 0 or -1. If it returns 0, then it can tell the user the database is empty unlike before. I asked Tetsuya if this was okay, and he said it is fine as long as it follows the coding style and rules as the other functions. Another enhancement (at least I think it is) is making an make option that compiles the program in debug mode. So if you run 'make debug' it runs it in debug mode. If it is just 'make' then it is not in debug mode. To switch from on mode to another, you just need to exit the program and run 'make clean'. Then run the make command according to which mode you want the program to be in. 
    Some future enhancements I had in mind is when you print all the records in the database, it tells you the total records at the bottom and when I choose the modify option, it will state the record does not exist before it prompts for an address (basically fixing my bug). And the last enhancement is that when you add an record, and you input a duplicate or non-existing account number, it tells you right after you enter it, instead of prompting for the name and address after. As in general comments, I have to say that this project and project 1 has given me a better understanding of the linked list data structure and how to conceptually think and apply that to code.
   
